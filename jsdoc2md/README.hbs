# define-accessor2
[![Build Status](https://travis-ci.com/DigitalBrainJS/define-accessor2.svg?branch=master)](https://travis-ci.com/DigitalBrainJS/define-accessor2)
[![](https://badgen.net/npm/license/define-accessor2)](https://unpkg.com/define-accessor2/dist/define-accessor2.umd.js)
[![Coverage Status](https://coveralls.io/repos/github/DigitalBrainJS/define-accessor2/badge.svg?branch=master)](https://coveralls.io/github/DigitalBrainJS/define-accessor2?branch=master)
[![](https://badgen.net/github/issues/DigitalBrainJS/define-accessor2)](https://github.com/DigitalBrainJS/define-accessor2/issues)
[![](https://badgen.net/github/stars/DigitalBrainJS/define-accessor2)](https://github.com/DigitalBrainJS/define-accessor2/stargazers)

:star: Define feature-rich properties using decorators or plain functions. An extended version of Object.defineProperty :star:

# Features
- no dependencies
- supports decorators for methods and class properties
- supports legacy and current draft of decorator specification
- lazy properties
- cached properties - cache the value returned by the accessor getter. Cached value can be flushed later
- validation hook
- Joi validation out of the box
- built-in basic type system (see [Built-in types](#built-in-types))
- automatically flushes getter cache after changing related properties
- defining custom validators
- isolated contexts to define validators in a local scope
- chaining methods - can create chaining methods like get**PropName** and set**PropName**
- type predicates (isNumber, isNull etc)

## Installation

Install for node.js using npm/yarn:

``` bash
$ npm install define-property2 --save
```

``` bash
$ yarn add define-property2
```

````javascript
const {defineAccessor, flushAccessor}= require('define-accessor2');
````
## Playground

1) Clone `https://github.com/DigitalBrainJS/define-accessor2.git` repo
2) Run `npm install` to install dev-dependencies
3) Open `sandbox/sandbox.js` file with a basic example of using library decorators
4) Run this file using `npm run sandbox` or `npm run sandbox:watch` command to see the result

## Usage examples

A basic example of using library decorators (with [plugin-proposal-decorators](https://babeljs.io/docs/en/babel-plugin-proposal-decorators)
and [plugin-proposal-class-properties](https://babeljs.io/docs/en/babel-plugin-proposal-class-properties) babel plugins):
````javascript
const {type, string, number} = require("define-accessor2");

class Cat {
    @string
    name = '';
    @type(string|number)
    foo= 123;
}

const cat = new Cat();
cat.name = 'Lucky'; // Ok
cat.foo= 123;
cat.foo= '123';

cat.foo= true; // TypeError: Property foo accepts String|Number, but boolean given
cat.name = 123; // TypeError: Property name accepts String, but number given

````
More complex:
````javascript
const {type, cached, touches, validate, accessor, defineValidator, string}= require('define-accessor2');
const hash = require('object-hash');
const validator= require('validator');
const Joi= require('@hapi/joi');

//import all methods as validators predicates
defineValidator(validator);

class Model{
    // cached value
    @cached
    get sha(){
        console.log('calc sha');
        return hash(this);
    }
    // this prop affects 'sha' prop
    @touches('sha')
    @string
    name= 'anonymous';

    @touches('sha')
    @type('number|string')
    foo= 30;
    // configure all the necessary accessor features in one decorator (recommended way)
    @accessor({
        touches: 'sha',
        validate: 'isEmail'
    })
    email= '';
    // Joi validator can be used out of the box for complex properties validation
    @validate(Joi.array().items(Joi.string()))
    labels= [];
}

const model= new Model();

console.log(model.name); // 'anonymous'
console.log(model.sha); // calc sha
console.log(model.sha); // just return the cached value
model.name= 'admin';
console.log(model.sha); // calc sha
model.email= 'admin@google.com';
console.log(model.sha);
model.foo= true;
model.labels= ['123'];
````
Just using plain functions without any decorators
````javascript
     const {defineAccessor, TYPE_NUMBER, TYPE_STRING}= require('define-accessor2');
     const obj= {};

     defineAccessor(obj, 'someProp', {
         type: 'string|number'
     });
     //or using type bit mask
     defineAccessor(obj, 'someProp', {
         type: TYPE_STRING|TYPE_NUMBER
     });
````
Validate with Joi:
````javascript
     const {defineAccessor}= require('define-accessor2');
     const Joi = require('@hapi/joi');
     const user= {};

     defineAccessor(user, 'age', {
        validate: Joi.number().integer().min(0).max(100),
        set(newValue, prevValue){
            //do some work
            return newValue; //set newValue to the property age
        }
     });

    user.age= 30; //ok, now age= 30
    user.age= 150; //ValidationError: value (150) is not valid for property (age). Reason: "value" must be less than or equal to 100
````
Custom validator:
````javascript
     //import library and create a new context for a local validator definition
     const {defineAccessor, defineValidator}= require('define-accessor2').newContext();
     const validator= require('validator');
     const model= {};

    defineValidator({
        mongoId: validator.isMongoId
    });

    defineAccessor(model, 'id', {
        validate: 'mongoId'
    });
````
````javascript
const {defineAccessor, flushAccessor}= require('define-accessor2');
const hash = require('object-hash');

const obj= {};

const normalize = (str)=> str.replace(/^\w/, (str)=> str.toUpperCase());

const {_name}= defineAccessor(obj, {
    hash: {
        get(){
            return hash(this);
        },
        cached: true
    },
    name: {
        validate(value, {reject, set}){
            typeof value!=='string' && reject('must be a string');
            value= value.trim();
            !/^[a-zA-Z]+$/.test(value) && reject('only a-zA-Z allowed');
            // alternative way to reject
            if( value.length<= 3) return 'length should be greater than 3';
            // returning other values than 'true' and 'undefined' treated, as rejection,
            // strings are considered as rejection reason
            set(value); // change the value
        },
        set: normalize,
        touches: ['hash'],
        value: 'Jon'
    },

    email: {
        validate: validator.isEmail
    }

}, {prefix: '_'})

````

## Functional diagram
![Accessor functional diagram](https://github.com/DigitalBrainJS/define-accessor2/raw/master/public/accessor.png)

## API

{{>main}}

## Built-in types
The library's type system consist of native JS types and extended pseudotypes.
The following types do not overlap, unlike native javascript types.
For example, null is not an object, NaN is not a number, and so on.
- Undefined (TYPE_UNDEFINED)
- Null (TYPE_NULL)
- Boolean (TYPE_BOOLEAN)
- Number (TYPE_NUMBER)
- String (TYPE_STRING)
- Function (TYPE_FUNCTION)
- Object (TYPE_OBJECT)
- Symbol (TYPE_SYMBOL)
- BigInt (TYPE_BIGINT)
- Array (TYPE_ARRAY)
- Infinity (TYPE_INFINITY)
- NaN (TYPE_NAN)
- Date (TYPE_DATE)
- Promise (TYPE_PROMISE)
- RegExp (TYPE_REGEXP)
- Error (TYPE_ERROR)
- Set (TYPE_SET)
- Map (TYPE_MAP)

An exception is the integer pseudotype which is an integer and a number types.
- Integer (TYPE_INTEGER)

Special type:
- Any (TYPE_ANY)

*There are predicates for each type named like isUndefined(value), isNumber(value) etc.*

You can combine these types:
- type: 'string|number' // strings
- type: TYPE_STRING|TYPE_NUMBER //bit mask
- type: string|number // decorators are implicitly converted to a type bit mask using the valueOf() internal method

### Decorators
The library supports both versions of the decorators specification (legacy & current draft).
There are following decorators:
- lazy
- cached
- touches
- type
- validate
- accessor
- and decorators for each basic type (string, number, array etc. see [Built-in types](#built-in-types))
Each decorator has valueOf method that returns a type bit mask, so it's possible to pass decorators as a type:
`@type(number|string)`

## Contribution
Feel free to fork, open issues, enhance or create pull requests.
## License

The MIT License
Copyright (c) 2019 Dmitriy Mozgovoy <robotshara@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
